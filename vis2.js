// Generated by CoffeeScript 1.7.1

/*

LEVEL 1B: Parallel Coordinates Visualization

The software tool at this level should be able to display the tabular data in the spreadsheet named
as “5-years” in FreqWords.xlsx using a parallel coordinates plot. The table includes 5 major data
columns, labelled as “1990-1994”, “1995-1999”, ..., “2000-2014”. Each column has 40 measured
values, that is, 40 multivariate data objects (with five variables). In addition to the five numerical
values, each data object is associated with a nominal value, representing a frequently-occurred
word.

Your software must have the following essential functionality:

 - Display a line for each of the k (20  k  40) data objects, intersecting with the 6 axes at correct places. If you choose k < 40, it is recommended to use the k words with more frequent occurrence.
 - Display labels for each axis.
 - Provide a brushing utility. (Vertical brushing on all)
 - It is recommended to set all five numerical axes to the range [0, 250]. However, you may experiment with other ranges for these axes.
 */
var COLUMN_NAMES;

COLUMN_NAMES = ['1990-1994', '1995-1999', '2000-2004', '2005-2009', '2010-2014'];

d3.csv('FreqWords5Year.csv').row(function(rawRow) {
  (['sum'].concat(COLUMN_NAMES)).map(function(columnName) {
    return rawRow[columnName] = parseInt(rawRow[columnName], 10);
  });
  return rawRow;
}).get(function(error, rows) {
  var HEIGHT, WIDTH, adjustedRows, brush, brushes, colName, colourScale, focusLines, g, grouped, horizontalScale, rankingData, rowMatchesBrushes, svg, verticalOrderingScale, _i, _j, _len, _len1;
  WIDTH = 600;
  HEIGHT = 600;
  svg = d3.select('#visualisation2').style({
    width: WIDTH + 200,
    height: HEIGHT + 200,
    background: '#444'
  });
  g = svg.append('g').attr({
    'transform': 'translate(70,100)'
  });
  grouped = {};
  for (_i = 0, _len = COLUMN_NAMES.length; _i < _len; _i++) {
    colName = COLUMN_NAMES[_i];
    grouped[colName] = rows.map(function(row) {
      return row[colName];
    }).sort().reverse();
  }
  rankingData = function(row) {
    var i, _j, _results;
    _results = [];
    for (i = _j = 0; _j <= 4; i = ++_j) {
      _results.push({
        x: i,
        y: grouped[COLUMN_NAMES[i]].indexOf(row[COLUMN_NAMES[i]])
      });
    }
    return _results;
  };
  adjustedRows = rows.map(function(row) {
    return {
      rankingData: rankingData(row),
      sum: row.sum,
      word: row.word
    };
  });
  horizontalScale = d3.scale.linear().domain([0, 4]).range([0, WIDTH - 20]);
  verticalOrderingScale = d3.scale.linear().domain([0, rows.length - 1]).range([0, HEIGHT]);
  colourScale = d3.scale.linear().domain([0, 40]).range(['hsl(240, 40%, 90%)', 'hsl(111, 60%, 30%)']);
  g.selectAll('path').data(adjustedRows).enter().append('path').attr({
    'title': function(row) {
      return row.word;
    },
    'class': 'line',
    'd': function(row) {
      return (d3.svg.line().interpolate('cardinal').tension(0.8).x(function(d) {
        return horizontalScale(d.x);
      }).y(function(d) {
        return verticalOrderingScale(d.y);
      }))(row.rankingData);
    },
    'stroke': function(row) {
      return colourScale(row.rankingData[4].y);
    },
    'stroke-width': 1.8,
    'fill': 'none'
  });
  g.selectAll('text').data(adjustedRows).enter().append('text').text(function(row) {
    return row.word;
  }).attr({
    'class': 'word',
    x: WIDTH + 15,
    y: function(row) {
      return verticalOrderingScale(row.rankingData[4].y);
    },
    fill: function(row) {
      return colourScale(row.rankingData[4].y);
    }
  });
  brushes = [0, 1, 2, 3, 4].map(function(i) {
    var axis, brush, brushg;
    axis = d3.svg.axis().scale(verticalOrderingScale).orient('right');
    g.append('g').attr({
      'class': 'vertical-axis',
      transform: 'translate(' + horizontalScale(i) + ',0)'
    }).call(axis);
    brush = d3.svg.brush().y(verticalOrderingScale);
    brushg = g.append('g').attr({
      'class': 'brush',
      'transform': 'translate(' + (horizontalScale(i) - 10) + ',0)',
      'fill': 'rgba(255,0,0,0.2)'
    }).call(brush);
    brushg.selectAll('rect').attr({
      width: 40
    });
    return brush;
  });
  rowMatchesBrushes = function(row) {
    var i, lower, upper, _j, _ref, _ref1;
    for (i = _j = 0; _j <= 4; i = ++_j) {
      if (!(!brushes[i].empty())) {
        continue;
      }
      _ref = brushes[i].extent(), lower = _ref[0], upper = _ref[1];
      if (!((lower <= (_ref1 = row.rankingData[i].y) && _ref1 <= upper))) {
        return false;
      }
    }
    return true;
  };
  focusLines = function() {
    return g.selectAll('path.line, text.word').attr({
      'opacity': 0.1
    }).filter(rowMatchesBrushes).attr({
      'opacity': 0.8
    });
  };
  for (_j = 0, _len1 = brushes.length; _j < _len1; _j++) {
    brush = brushes[_j];
    brush.on('brush', focusLines);
  }
});
