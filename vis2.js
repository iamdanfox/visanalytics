// Generated by CoffeeScript 1.7.1

/*

LEVEL 1B: Parallel Coordinates Visualization

The software tool at this level should be able to display the tabular data in the spreadsheet named
as “5-years” in FreqWords.xlsx using a parallel coordinates plot. The table includes 5 major data
columns, labelled as “1990-1994”, “1995-1999”, ..., “2000-2014”. Each column has 40 measured
values, that is, 40 multivariate data objects (with five variables). In addition to the five numerical
values, each data object is associated with a nominal value, representing a frequently-occurred
word.

Your software must have the following essential functionality:

 - Display a line for each of the k (20  k  40) data objects, intersecting with the 6 axes at correct places. If you choose k < 40, it is recommended to use the k words with more frequent occurrence.
 - Display labels for each axis.
 - Provide a brushing utility. (Vertical brushing on all)
 - It is recommended to set all five numerical axes to the range [0, 250]. However, you may experiment with other ranges for these axes.
 */
var COLUMN_NAMES;

COLUMN_NAMES = ['1990-1994', '1995-1999', '2000-2004', '2005-2009', '2010-2014'];

d3.csv('FreqWords5Year.csv').row(function(rawRow) {
  (['sum'].concat(COLUMN_NAMES)).map(function(columnName) {
    return rawRow[columnName] = parseInt(rawRow[columnName], 10);
  });
  return rawRow;
}).get(function(error, rows) {
  var HEIGHT, WIDTH, axis, colName, colourScale, g, grouped, height, horizontalScale, i, rankingData, svg, verticalOrderingScale, _i, _j, _len;
  WIDTH = 800;
  HEIGHT = 380;
  svg = d3.select('#visualisation2').style({
    width: WIDTH,
    height: HEIGHT,
    background: '#444'
  });
  g = svg.append('g').attr('transform', 'translate(100,100)');
  grouped = {};
  for (_i = 0, _len = COLUMN_NAMES.length; _i < _len; _i++) {
    colName = COLUMN_NAMES[_i];
    grouped[colName] = rows.map(function(row) {
      return row[colName];
    }).sort().reverse();
  }
  horizontalScale = d3.scale.linear().domain([0, 4]).range([0, 580]);
  verticalOrderingScale = d3.scale.linear().domain([0, rows.length - 1]).range([0, 500]);
  colourScale = d3.scale.category20c().domain([36, 1000]);
  axis = d3.svg.axis().scale(verticalOrderingScale).orient('right');
  rankingData = function(row) {
    var i, _j, _results;
    _results = [];
    for (i = _j = 0; _j <= 4; i = ++_j) {
      _results.push({
        x: i,
        y: grouped[COLUMN_NAMES[i]].indexOf(row[COLUMN_NAMES[i]])
      });
    }
    return _results;
  };
  g.selectAll('path').data(rows).enter().append('path').attr({
    'd': function(row) {
      return (d3.svg.line().interpolate('cardinal').tension(0.8).x(function(d) {
        return horizontalScale(d.x);
      }).y(function(d) {
        return verticalOrderingScale(d.y);
      }))(rankingData(row));
    },
    'stroke': function(row) {
      return colourScale(row.sum);
    },
    'stroke-width': 1.8,
    'fill': 'none'
  });
  for (i = _j = 0; _j <= 4; i = ++_j) {
    g.append('g').attr('transform', 'translate(' + horizontalScale(i) + ',0)').call(axis);
  }
  height = g[0][0].getBBox().height;
  svg.style({
    height: height + 200
  });
});
